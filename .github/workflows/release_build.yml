name: Release Build

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt
        if [ "${{ runner.os }}" == "macOS" ]; then
          brew install create-dmg
        fi
      shell: bash
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        else
          echo "version=$(cat config/app.json | python -c "import sys, json; print(json.load(sys.stdin)['version'])")" >> $GITHUB_ENV
        fi
      shell: bash
    
    - name: Set build variables
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "PYINSTALLER_SEP=;" >> $GITHUB_ENV
          echo "PYINSTALLER_ADD_DATA_FORMAT=--add-data" >> $GITHUB_ENV
        else
          echo "PYINSTALLER_SEP=:" >> $GITHUB_ENV
          echo "PYINSTALLER_ADD_DATA_FORMAT=--add-data=" >> $GITHUB_ENV
        fi
        echo "Build version: ${{ env.version }}"
    
    - name: Build Application
      shell: bash
      run: |
        echo "============ Build Environment ============"
        echo "Platform: ${{ matrix.platform }}"
        echo "OS: ${{ runner.os }}"
        echo "Python: ${{ env.pythonLocation }}"
        echo "Version: ${{ env.version }}"
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "========================================="
        python scripts/build.py --platform ${{ matrix.platform }} --type all
    
    - name: List release directory
      shell: bash
      run: |
        echo "Release directory contents:"
        ls -R release/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}
        path: release

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        else
          echo "version=$(cat config/app.json | python -c "import sys, json; print(json.load(sys.stdin)['version'])")" >> $GITHUB_ENV
        fi
      shell: bash
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release
        
    - name: List downloaded artifacts
      shell: bash
      run: |
        echo "Downloaded artifacts:"
        ls -R release/
        
    - name: Merge release.json files
      run: |
        echo "Merging release.json files..."
        python -c '
        import json
        import glob
        import os
        
        # 初始化合并后的数据
        merged_data = {"files": []}
        
        # 查找所有 release.json 文件
        json_files = glob.glob("release/**/release.json", recursive=True)
        print(f"Found {len(json_files)} release.json files")
        
        # 合并所有文件数据
        for json_file in json_files:
            print(f"Processing {json_file}")
            try:
                with open(json_file, "r") as f:
                    data = json.load(f)
                    if "files" in data:
                        merged_data["files"].extend(data["files"])
            except Exception as e:
                print(f"Error processing {json_file}: {str(e)}")
        
        # 保存合并后的文件
        with open("release/release.json", "w") as f:
            json.dump(merged_data, f, indent=2)
        print("Merged release.json created successfully")
        '
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/release-windows/**/jvman-${{ env.version }}-windows-setup.exe
          release/release-windows/**/jvman-${{ env.version }}-windows.zip
          release/release-macos/**/jvman-${{ env.version }}-macos-setup.dmg
          release/release-macos/**/jvman-${{ env.version }}-macos.zip
          release/release-linux/**/jvman-${{ env.version }}-linux-setup.deb
          release/release-linux/**/jvman-${{ env.version }}-linux.zip
          release/release.json
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 